{"version":3,"sources":["components/Artwork/Artwork.js","App.js","serviceWorker.js","index.js"],"names":["Artwork","props","resetArtworksTheme","theme","resetArtworks","state","artworks","i","setState","fetchSessionStorage","a","JSON","parse","sessionStorage","getItem","setPicture","picTheme","setSound","soundTheme","setText","textTheme","updateSessionStorage","setItem","stringify","artNr","picturePath","toString","randomFile","Math","floor","random","updatedArtworks","fetch","fetchedPic","text","data","pic","chosenPic","soundPath","chosenSound","textPath","fetchedText","json","textFile","chosenText","localStorage","this","className","dangerouslySetInnerHTML","__html","ref","src","controls","React","Component","App","handleChangePictureTheme","themeNr","currentPictureTheme","handleChangeSoundTheme","currentSoundTheme","handleChangeTextTheme","currentTextTheme","handleChangeArtwork","artworkNr","currentArtworkNr","menuHandler","prevState","menuOpen","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf5fb7e7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Artwork.css';\n\n\nexport default class Artwork extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      artworks : [['','',''], ['','',''], ['','',''], ['','','']],  \n                                  // holds paths to artwork content within the given \n                                  // themes. Format: [picturePath, soundPath, textPath]\n      artNr : JSON.parse(localStorage.getItem(\"currentArtworkNr\")) || 1,                  \n                                  // holds the current artwork nr\n      picTheme : JSON.parse(localStorage.getItem(\"currentPictureTheme\")) || 1,               \n                                  // holds the current picture theme\n      soundTheme : JSON.parse(localStorage.getItem(\"currentSoundTheme\")) || 1,             \n                                  // holds the current sound theme\n      textTheme : JSON.parse(localStorage.getItem(\"currentTextTheme\")) || 1,              \n                                  // holds the current text theme              \n      chosenPic : [],             // holds the current picture in the artwork\n      chosenSound : '',           // holds the current sound in the artwork\n      chosenText : '',            // holds the current text in the artwork\n    }; \n  } \n\n  componentDidMount() {\n    if(sessionStorage.getItem(\"sessionCombination\")) { \n      this.fetchSessionStorage()\n    } else {\n      this.setPicture(this.state.picTheme)\n      this.setSound(this.state.soundTheme)\n      this.setText(this.state.textTheme)\n    }\n  }\n\n  componentDidUpdate() {\n    constÂ { artNr, picTheme, soundTheme, textTheme } = this.state\n\n    if (this.props.artNr !== artNr) {\n      this.setState({ artNr : this.props.artNr })\n      this.setPicture(this.props.picTheme)\n      this.setSound(this.props.soundTheme)\n      this.setText(this.props.textTheme)\n    }\n\n    if (this.props.picTheme !== picTheme) {\n      this.resetArtworksTheme(0)\n      this.setState({ picTheme : this.props.picTheme })\n      this.setPicture(this.props.picTheme)\n    }\n\n    if (this.props.soundTheme !== soundTheme) {\n      this.resetArtworksTheme(1)\n      this.setState({ soundTheme : this.props.soundTheme })\n      this.setSound(this.props.soundTheme)\n    }\n\n    if (this.props.textTheme !== textTheme) {\n      this.resetArtworksTheme(2)\n      this.setState({ textTheme : this.props.textTheme })\n      this.setText(this.props.textTheme)\n    }\n  }\n\n  // sets values within given category to '' after change of theme\n  resetArtworksTheme = (theme) => {\n    let resetArtworks = this.state.artworks\n    let i = 0\n      for (i = 0; i < 4; i++) {\n        resetArtworks[i][theme] = ''\n      }\n      this.setState({ \n        artworks : resetArtworks \n      })\n  }\n\n  // fetches values stored in session storage and saves them in this.state.artworks\n  fetchSessionStorage = async () => {\n    const artworks = await JSON.parse(sessionStorage.getItem(\"sessionCombination\"));\n    this.setState({ artworks : artworks })\n    this.setPicture(this.state.picTheme)\n    this.setSound(this.state.soundTheme)\n    this.setText(this.state.textTheme)\n  }\n\n  // exports newly set values to session storage\n  updateSessionStorage = () => {\n    sessionStorage.setItem(\"sessionCombination\", JSON.stringify(this.state.artworks))\n  }\n  \n  // fetches a given or a random picture within given theme\n  setPicture = async (picTheme) => {\n    const { artNr } = this.props;\n    const { artworks } = this.state;\n    let picturePath = '';\n    if (artworks[artNr-1][0]) {\n      picturePath = artworks[artNr-1][0];\n    } else {\n      const theme = picTheme.toString()\n      const randomFile = Math.floor(Math.random()*4+1).toString()\n      picturePath = 'pictures/theme' + theme + '/feed' + randomFile + '.svg';\n    }\n    let updatedArtworks = artworks;\n    updatedArtworks[artNr-1][0] = picturePath;\n    const fetchedPic = await fetch(picturePath)\n    const data = await fetchedPic.text()\n    const pic = data\n    this.setState({\n      chosenPic : pic,\n      artworks : updatedArtworks\n    })\n    this.updateSessionStorage();\n  }\n\n  // fetches a given or a random sound within given theme\n  setSound = async (soundTheme) => {\n    const { artNr } = this.props;\n    const { artworks } = this.state;\n    let soundPath = ''\n    if (artworks[artNr-1][1]) {\n      soundPath = artworks[artNr-1][1];\n    } else {\n      const theme = soundTheme.toString()\n      const randomFile = Math.floor(Math.random()*4+1).toString()\n      soundPath = \"sounds/theme\" + theme + \"/Sound\" + randomFile + \".mp3\"\n    }\n    let updatedArtworks = artworks\n    updatedArtworks[artNr-1][1] = soundPath\n    this.setState({\n        chosenSound : soundPath,\n        artworks : updatedArtworks\n    })\n    this.updateSessionStorage()\n  }\n\n  // fetches a given or a random text within given theme\n  setText = async (textTheme) => {\n    const { artNr } = this.props;\n    const { artworks } = this.state;\n    let textPath = ''\n    if (artworks[artNr-1][2]) {\n      textPath = artworks[artNr-1][2];\n    } else {\n      const theme = textTheme.toString()\n      const randomFile = (Math.floor(Math.random() * 4)+1).toString()\n      textPath = 'texts/theme' + theme + '/text' + randomFile + '.json'\n    }\n    const fetchedText = await fetch(textPath)\n    const textFile = await fetchedText.json()\n    const text = textFile.text\n    let updatedArtworks = artworks\n    updatedArtworks[this.props.artNr-1][2] = textPath\n    this.setState({\n      chosenText : text,\n      artworks : updatedArtworks\n    })\n    this.updateSessionStorage()\n  }\n\n  // the parent render of the react component\n  render() {\n    const { chosenText, chosenPic, chosenSound } = this.state\n\n    return (\n      <div className=\"artwork-parent\">\n\n        <div className=\"svg-container\" dangerouslySetInnerHTML={{__html: chosenPic}}>\n        </div>\n\n        <div className=\"text-container\">\n            <p className=\"chosen-text\">\n                {chosenText}\n            </p>\n        </div>\n\n        <div className=\"sound-container\">\n          <audio ref=\"audio_tag\" src={chosenSound} controls></audio>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport './App.css';\nimport Artwork from './components/Artwork/Artwork';\n\nexport default class App extends React.Component {\n  constructor(props){ \n    super(props);\n    this.state = {\n      currentArtworkNr : 1,                       // holds the current artwork nr\n      currentPictureTheme : 1,                    // holds the current picture theme\n      currentSoundTheme : 1,                      // holds the current sound theme\n      currentTextTheme : 1,                       // holds the current text theme\n      menuOpen: false                             // holds value controlling menu rendering\n    }; \n  }\n\n  componentDidMount(){\n    if(localStorage.getItem(\"currentArtworkNr\")) {\n      this.setState({\n        currentArtworkNr : JSON.parse(localStorage.getItem(\"currentArtworkNr\"))\n      })\n    } else {\n      localStorage.setItem(\"currentArtworkNr\", JSON.stringify(1))\n    }\n    if(localStorage.getItem(\"currentPictureTheme\")) {\n      this.setState({\n        currentPictureTheme : JSON.parse(localStorage.getItem(\"currentPictureTheme\")),\n      })\n    } else {\n        localStorage.setItem(\"currentPictureTheme\", JSON.stringify(1))\n    }\n    if(localStorage.getItem(\"currentSoundTheme\")) {\n      this.setState({\n        currentSoundTheme : JSON.parse(localStorage.getItem(\"currentSoundTheme\"))\n      })\n    } else {\n      localStorage.setItem(\"currentSoundTheme\", JSON.stringify(1))\n    }\n    if(localStorage.getItem(\"currentTextTheme\")) {\n      this.setState({\n        currentTextTheme : JSON.parse(localStorage.getItem(\"currentTextTheme\"))\n      })\n    } else {\n      localStorage.setItem(\"currentTextTheme\", JSON.stringify(1))\n    }\n  }\n\n  // sets the new picture theme\n  handleChangePictureTheme = (themeNr) => {\n    this.setState({\n      currentPictureTheme : themeNr\n    });\n    localStorage.setItem(\"currentPictureTheme\", JSON.stringify(themeNr))\n  }\n\n  // sets the new sounds theme and reset the artworks\n  handleChangeSoundTheme = (themeNr) => {\n    this.setState({\n      currentSoundTheme : themeNr\n    });\n    localStorage.setItem(\"currentSoundTheme\", JSON.stringify(themeNr))\n  }\n\n  // sets the new text theme\n  handleChangeTextTheme = (themeNr) => {\n    this.setState({\n      currentTextTheme : themeNr\n    });\n    localStorage.setItem(\"currentTextTheme\", JSON.stringify(themeNr))\n  }\n\n  // sets the new artwork number\n  handleChangeArtwork = function (artworkNr) {\n    this.setState({\n      currentArtworkNr : artworkNr\n    });\n    localStorage.setItem(\"currentArtworkNr\", JSON.stringify(artworkNr))\n  }\n\n  // Toggles hamburger menu\n  menuHandler = () =>{\n    this.setState((prevState) => {\n      return {menuOpen:!prevState.menuOpen}\n    });\n  };\n\n  // the parent render of the react component\n  render() {\n    const { currentPictureTheme, currentSoundTheme, currentTextTheme, currentArtworkNr } = this.state\n\n    return (\n      <div className=\"parent-element\">\n        <div className={this.state.menuOpen ? \"overlay menu-open\" : \"overlay\"} onClick={ () => this.menuHandler()}></div>\n        <header>\n          <div className={this.state.menuOpen ? \"hamburger-cont menu-open\" : \"hamburger-cont\"} onClick={ () => this.menuHandler()}>\n            <button className=\"menu-button\"></button>\n            <div className=\"hamburger\"><div></div></div>\n          </div>\n          <h1>The DIY Gallery</h1>\n        </header>\n        <div className=\"artwork-choice-container\">\n          <button className={\"artwork-button\" + (currentArtworkNr === 1 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeArtwork(1) }>Artwork 1\n          </button>\n          <button className={\"artwork-button\" + (currentArtworkNr === 2 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeArtwork(2) }>Artwork 2\n          </button>\n          <button className={\"artwork-button\" + (currentArtworkNr === 3 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeArtwork(3) }>Artwork 3\n          </button>\n          <button className={\"artwork-button\" + (currentArtworkNr === 4 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeArtwork(4) }>Artwork 4\n          </button>\n        </div>\n\n        <div className=\"artwork-container\">         \n          <Artwork\n            picTheme = {currentPictureTheme}\n            soundTheme = {currentSoundTheme}\n            textTheme = {currentTextTheme}\n            artNr = {currentArtworkNr}\n          />\n        </div>\n\n        <div className={this.state.menuOpen ? \"theme-choice-container menu-open\" : \"theme-choice-container\"}>\n          <h4>Bilde kategori:</h4>\n          <button className={\"theme-button\" + (currentPictureTheme === 1 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangePictureTheme(1) }>Logo\n          </button>\n          <button className={\"theme-button\" + (currentPictureTheme === 2 ? \" chosen\" : \"\")} \n            onClick={ () => this.handleChangePictureTheme(2) }>Dyr\n            </button>\n          <button className={\"theme-button\" + (currentPictureTheme === 3 ? \" chosen\" : \"\")} \n            onClick={ () => this.handleChangePictureTheme(3) }>Skilt\n          </button>\n\n          <h4>Lyd kategori:</h4>\n          <button className={\"theme-button\" + (currentSoundTheme === 1 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeSoundTheme(1) }>Natur\n          </button>\n          <button className={\"theme-button\" + (currentSoundTheme === 2 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeSoundTheme(2) }>Instrument\n          </button>\n          <button className={\"theme-button\" + (currentSoundTheme === 3 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeSoundTheme(3) }>Farkost\n          </button>\n\n          <h4>Tekst kategori:</h4>\n          <button className={\"theme-button\" + (currentTextTheme === 1 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeTextTheme(1) }>DDE\n          </button>\n          <button className={\"theme-button\" + (currentTextTheme === 2 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeTextTheme(2) }>Livet\n          </button>\n          <button className={\"theme-button\" + (currentTextTheme === 3 ? \" chosen\" : \"\")}\n            onClick={ () => this.handleChangeTextTheme(3) }>Ordtak\n          </button>\n        </div>\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}